#ifndef MELKORDLL_H
#define MELKORDLL_H

#include "Melkor.h"

int _stdcall initDll(char* errorString, int maxChar);
int _stdcall cleanupDll();

int _stdcall DllGetBoard(int *inBoard, int boardSize);
void _stdcall DllSetBoardSize(int bs);
int _stdcall DllGetBoardSize();
int _stdcall DllPlayMove(int x, int y, int colour);
int _stdcall DllGenerateMove(int *x, int *y, int colour);
int _stdcall DllGetScoredPoints(float *inBoard, int boardSize, int colour);

int _stdcall DllSaveSGF(const char* filename);
int _stdcall DllLoadSGF(const char* filename);
int _stdcall DllBackSGF(int step);
int _stdcall DllNextSGF(int step);

int _stdcall DllLoadNeuralNetwork(const char* filename);

int _stdcall DllGetLastMove(int* x, int* y, int* colour);

// Settings
int _stdcall DllGetVersionString(char* versionString);
int _stdcall DllSetVerbose(bool verbose);
int _stdcall DllGetStatusDepth();
int _stdcall DllSetStatusDepth(int depth);
int _stdcall DllGetUseDynamicSearchDepth();
int _stdcall DllSetUseDynamicSearchDepth(bool useDynamicSearchDepth);
int _stdcall DllGetUseGlobalMoveFunction();
int _stdcall DllSetUseGlobalMoveFunction(bool useGlobalMoveFunction);
int _stdcall DllSetKomi(float komi);
int _stdcall DllSetHandicap(int handicap);
int _stdcall DllGetTimePerMove();
int _stdcall DllSetTimePerMove(int timePerMove);
int _stdcall DllSetTimeSettings(int mainTime, int byoyomiTime, int byoyomiStones);
int _stdcall DllSetCurrentTimeSettingsBlack(int mainTime, int byoyomiTime, int byoyomiStones);
int _stdcall DllSetCurrentTimeSettingsWhite(int mainTime, int byoyomiTime, int byoyomiStones);
int _stdcall DllPlayTimedGame(int playTimedGame);

// SGF Information
int _stdcall DllSetBlackName(char* name);
int _stdcall DllSetWhiteName(char* name);
int _stdcall DllSetSGFResultString(char* result);

// Scoring functions
int _stdcall DllGetCapturedBlackStones();
int _stdcall DllGetCapturedWhiteStones();

int _stdcall DllGetTerritoryBlack(int *inBoard, int boardSize);
int _stdcall DllGetTerritoryWhite(int *inBoard, int boardSize);
int _stdcall DllGetDeadStonesBlack(int *inBoard, int boardSize);
int _stdcall DllGetDeadStonesWhite(int *inBoard, int boardSize);
int _stdcall DllGetDeadStones(int *inBoard, int boardSize);

// Return a score with respect to Black
float _stdcall DllScoreBoard();

// Return a final score with the board and strings statuses updated
float _stdcall DllFinalScore();

// Logging
int _stdcall DllLogStart(const char* filename);
int _stdcall DllLogStop();

// Basically just provide a function to run gtp_commands

// For GTP calls - register a callback function with the DLL importer (i.e. a VB app)
//   so that the output generated by a GTP command can be directed to the importer

// e.g.    CALLBACK GTPOutput(string output)  // This is called by the DLL on the VB app
//                                            // which must define and implement it
// In DllMain() call morgoth->registerOutputCallback(&GTPOutput)
// and then in the GTPFunctions::gtp_printf() and wherever else it outputs text
// we need calls to the registered output callback function 
//
// e.g. void gtp_printf() {
//         string output = blah...
//         if(outputCallbackRegistered)
//            outputCallback(output);
//      }

#endif // MELKORDLL_H