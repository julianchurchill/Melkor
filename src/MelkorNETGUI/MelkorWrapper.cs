//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;
using System.Text;

namespace MelkorNETGUI {
	
	/// <summary>
	/// This class is a wrapper for easy access to functions in the MelkorDLL.dll library.
	/// </summary>
	/// <remarks>
	/// 	created by - Administrator
	/// 	created on - 22/11/2004 17:39:56
	/// </remarks>
	public class MelkorWrapper : object {
		
		// Constants that match Melkor\Utils\globals.h
		public const int EMPTY = 0;
		public const int WHITE = 1;
		public const int BLACK = 2;
		
		/// <summary>
		/// Default constructor - initializes all fields to default values
		/// </summary>
		public MelkorWrapper() {
		}
	
		// Uses a char* as parameter 1
		// Returns 0 on failure
		[DllImport("MelkorDLL.dll")]
		public static extern int initDll(
		                                 [MarshalAs(UnmanagedType.LPArray)] byte[] errorString, int maxChar);

		[DllImport("MelkorDLL.dll")]
		public static extern int cleanupDll();

		[DllImport("MelkorDLL.dll")]
		public static extern int DllGetBoard(int[] inBoard, int boardSize);

		[DllImport("MelkorDLL.dll")]
		public static extern void DllSetBoardSize(int bs);

		[DllImport("MelkorDLL.dll")]
		public static extern int DllGetBoardSize();

		[DllImport("MelkorDLL.dll")]
		public static extern int DllPlayMove(int x, int y, int colour);
		
		[DllImport("MelkorDLL.dll")]
		public static extern int DllGenerateMove(ref int x, ref int y, int colour);
		
		[DllImport("MelkorDLL.dll")]
		public static extern int DllGetScoredPoints(float[] inBoard, int boardSize, int colour);
		
		// Note: This function should only be called when in the middle of 
		// a game - editing an SGF or stepping through may invalidate the board.
		[DllImport("MelkorDLL.dll")]
		public static extern int DllUndo();
		
		// Uses a const char* as parameter 1
		[DllImport("MelkorDLL.dll")]
		public static extern int DllSaveSGF([MarshalAs(UnmanagedType.LPStr)] String filename);

		// Uses a const char* as parameter 1
		[DllImport("MelkorDLL.dll")]
		public static extern int DllLoadSGF([MarshalAs(UnmanagedType.LPStr)] String filename);

		[DllImport("MelkorDLL.dll")]
		public static extern int DllBackSGF(int step);

		[DllImport("MelkorDLL.dll")]
		public static extern int DllNextSGF(int step);

		// Returns 0 on failure
		[DllImport("MelkorDLL.dll")]
		public static extern int DllLoadNeuralNetwork(String filename);
		
		[DllImport("MelkorDLL.dll")]
		public static extern int DllGetLastMove(ref int x, ref int y);

		/************/
		/* Settings */
		/************/
		
		[DllImport("MelkorDLL.dll")]
		public static extern int DllGetVersionString([MarshalAs(UnmanagedType.LPArray)] byte[] versionString,
		                                            int maxChar);
		
		[DllImport("MelkorDLL.dll")]
		public static extern int DllSetVerbose(bool verbose);

		[DllImport("MelkorDLL.dll")]
		public static extern int DllGetStatusDepth();
		
		[DllImport("MelkorDLL.dll")]
		public static extern int DllSetStatusDepth(int depth);

		[DllImport("MelkorDLL.dll")]
		public static extern int DllGetUseDynamicSearchDepth();

		[DllImport("MelkorDLL.dll")]
		public static extern int DllSetUseDynamicSearchDepth(bool useDynamicSearchDepth);

		[DllImport("MelkorDLL.dll")]
		public static extern int DllGetUseGlobalMoveFunction();

		[DllImport("MelkorDLL.dll")]
		public static extern int DllSetUseGlobalMoveFunction(bool useGlobalMoveFunction);

		[DllImport("MelkorDLL.dll")]
		public static extern int DllSetKomi(float komi);

		[DllImport("MelkorDLL.dll")]
		public static extern int DllSetHandicap(int handicap);

		[DllImport("MelkorDLL.dll")]
		public static extern int DllGetTimePerMove();

		[DllImport("MelkorDLL.dll")]
		public static extern int DllSetTimePerMove(int timePerMove);

		[DllImport("MelkorDLL.dll")]
		public static extern int DllSetTimeSettings(int mainTime, int byoyomiTime, int byoyomiStones);

		[DllImport("MelkorDLL.dll")]
		public static extern int DllSetCurrentTimeSettingsBlack(int mainTime, int byoyomiTime, int byoyomiStones);

		[DllImport("MelkorDLL.dll")]
		public static extern int DllSetCurrentTimeSettingsWhite(int mainTime, int byoyomiTime, int byoyomiStones);

		// Uses a const char* as parameter 1
		[DllImport("MelkorDLL.dll")]
		public static extern int DllSetBlackName([MarshalAs(UnmanagedType.LPStr)] String name);

		// Uses a const char* as parameter 1
		[DllImport("MelkorDLL.dll")]
		public static extern int DllSetWhiteName([MarshalAs(UnmanagedType.LPStr)] String name);

		// Uses a const char* as parameter 1
		[DllImport("MelkorDLL.dll")]
		public static extern int DllSetSGFResultString([MarshalAs(UnmanagedType.LPStr)] String result);

		// Send a 1 to play a timed game, non-timed for any other value
		[DllImport("MelkorDLL.dll")]
		public static extern int DllPlayTimedGame(int playTimedGame);

		[DllImport("MelkorDLL.dll")]
		public static extern int DllGetCapturedBlackStones();

		[DllImport("MelkorDLL.dll")]
		public static extern int DllGetCapturedWhiteStones();

		[DllImport("MelkorDLL.dll")]
		public static extern int DllGetTerritoryBlack(int[] inBoard, int boardSize);

		[DllImport("MelkorDLL.dll")]
		public static extern int DllGetTerritoryWhite(int[] inBoard, int boardSize);

		[DllImport("MelkorDLL.dll")]
		public static extern int DllGetDeadStonesBlack(int[] inBoard, int boardSize);

		[DllImport("MelkorDLL.dll")]
		public static extern int DllGetDeadStonesWhite(int[] inBoard, int boardSize);

		[DllImport("MelkorDLL.dll")]
		public static extern int DllGetDeadStones(int[] inBoard, int boardSize);

		[DllImport("MelkorDLL.dll")]
		public static extern float DllScoreBoard();

		[DllImport("MelkorDLL.dll")]
		public static extern float DllFinalScore();
		
		/***********/
		/* Logging */
		/***********/
		[DllImport("MelkorDLL.dll")]
		public static extern int DllLogStart(String filename);	

		[DllImport("MelkorDLL.dll")]
		public static extern int DllLogStop();	
	}
}
